function dict = importfile2(filename, startRow, endRow)
%IMPORTFILE2 Import numeric data from a text file as a matrix.
%   DICT = IMPORTFILE2(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   DICT = IMPORTFILE2(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   dict = importfile2('dict.txt', 1, 36);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2020/02/03 17:25:47

%% Initialize variables.
delimiter = {'\t',','};
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
dict = table;
dict.VarName1 = cell2mat(raw(:, 1));
dict.VarName2 = cell2mat(raw(:, 2));
dict.VarName3 = cell2mat(raw(:, 3));
dict.VarName4 = cell2mat(raw(:, 4));
dict.VarName5 = cell2mat(raw(:, 5));
dict.VarName6 = cell2mat(raw(:, 6));
dict.VarName7 = cell2mat(raw(:, 7));
dict.VarName8 = cell2mat(raw(:, 8));
dict.VarName9 = cell2mat(raw(:, 9));
dict.VarName10 = cell2mat(raw(:, 10));
dict.VarName11 = cell2mat(raw(:, 11));
dict.VarName12 = cell2mat(raw(:, 12));
dict.e06 = cell2mat(raw(:, 13));
dict.VarName14 = cell2mat(raw(:, 14));
dict.e05 = cell2mat(raw(:, 15));
dict.VarName16 = cell2mat(raw(:, 16));
dict.VarName17 = cell2mat(raw(:, 17));
dict.VarName18 = cell2mat(raw(:, 18));
dict.VarName19 = cell2mat(raw(:, 19));
dict.VarName20 = cell2mat(raw(:, 20));
dict.e1 = cell2mat(raw(:, 21));
dict.VarName22 = cell2mat(raw(:, 22));
dict.e2 = cell2mat(raw(:, 23));
dict.VarName24 = cell2mat(raw(:, 24));
dict.VarName25 = cell2mat(raw(:, 25));
dict.VarName26 = cell2mat(raw(:, 26));
dict.VarName27 = cell2mat(raw(:, 27));
dict.VarName28 = cell2mat(raw(:, 28));
dict.e3 = cell2mat(raw(:, 29));
dict.VarName30 = cell2mat(raw(:, 30));
dict.e4 = cell2mat(raw(:, 31));
dict.VarName32 = cell2mat(raw(:, 32));
dict.e5 = cell2mat(raw(:, 33));
dict.VarName34 = cell2mat(raw(:, 34));
dict.e6 = cell2mat(raw(:, 35));
dict.VarName36 = cell2mat(raw(:, 36));
dict.VarName37 = cell2mat(raw(:, 37));
dict.VarName38 = cell2mat(raw(:, 38));
dict.VarName39 = cell2mat(raw(:, 39));
dict.VarName40 = cell2mat(raw(:, 40));
dict.VarName41 = cell2mat(raw(:, 41));
dict.VarName42 = cell2mat(raw(:, 42));
dict.VarName43 = cell2mat(raw(:, 43));
dict.VarName44 = cell2mat(raw(:, 44));
dict.e7 = cell2mat(raw(:, 45));
dict.VarName46 = cell2mat(raw(:, 46));
dict.e8 = cell2mat(raw(:, 47));
dict.VarName48 = cell2mat(raw(:, 48));
dict.e9 = cell2mat(raw(:, 49));
dict.VarName50 = cell2mat(raw(:, 50));
dict.e10 = cell2mat(raw(:, 51));
dict.VarName52 = cell2mat(raw(:, 52));
dict.e11 = cell2mat(raw(:, 53));
dict.VarName54 = cell2mat(raw(:, 54));
dict.e12 = cell2mat(raw(:, 55));
dict.VarName56 = cell2mat(raw(:, 56));
dict.VarName57 = cell2mat(raw(:, 57));
dict.VarName58 = cell2mat(raw(:, 58));
dict.VarName59 = cell2mat(raw(:, 59));
dict.VarName60 = cell2mat(raw(:, 60));
dict.VarName61 = cell2mat(raw(:, 61));
dict.VarName62 = cell2mat(raw(:, 62));
dict.e13 = cell2mat(raw(:, 63));
dict.VarName64 = cell2mat(raw(:, 64));
dict.e14 = cell2mat(raw(:, 65));
dict.VarName66 = cell2mat(raw(:, 66));
dict.VarName67 = cell2mat(raw(:, 67));
dict.VarName68 = cell2mat(raw(:, 68));
dict.VarName69 = cell2mat(raw(:, 69));
dict.VarName70 = cell2mat(raw(:, 70));
dict.e15 = cell2mat(raw(:, 71));
dict.VarName72 = cell2mat(raw(:, 72));
dict.e16 = cell2mat(raw(:, 73));
dict.VarName74 = cell2mat(raw(:, 74));
dict.e17 = cell2mat(raw(:, 75));
dict.VarName76 = cell2mat(raw(:, 76));
dict.e18 = cell2mat(raw(:, 77));
dict.VarName78 = cell2mat(raw(:, 78));
dict.VarName79 = cell2mat(raw(:, 79));
dict.VarName80 = cell2mat(raw(:, 80));
dict.VarName81 = cell2mat(raw(:, 81));
dict.VarName82 = cell2mat(raw(:, 82));
dict.VarName83 = cell2mat(raw(:, 83));
dict.VarName84 = cell2mat(raw(:, 84));
dict.VarName85 = cell2mat(raw(:, 85));
dict.VarName86 = cell2mat(raw(:, 86));
dict.VarName87 = cell2mat(raw(:, 87));
dict.VarName88 = cell2mat(raw(:, 88));
dict.e19 = cell2mat(raw(:, 89));
dict.VarName90 = cell2mat(raw(:, 90));
dict.e20 = cell2mat(raw(:, 91));
dict.VarName92 = cell2mat(raw(:, 92));
dict.VarName93 = cell2mat(raw(:, 93));
dict.VarName94 = cell2mat(raw(:, 94));
dict.VarName95 = cell2mat(raw(:, 95));
dict.VarName96 = cell2mat(raw(:, 96));
dict.VarName97 = cell2mat(raw(:, 97));
dict.VarName98 = cell2mat(raw(:, 98));
dict.e21 = cell2mat(raw(:, 99));
dict.VarName100 = cell2mat(raw(:, 100));
dict.VarName101 = cell2mat(raw(:, 101));
dict.VarName102 = cell2mat(raw(:, 102));
dict.VarName103 = cell2mat(raw(:, 103));
dict.VarName104 = cell2mat(raw(:, 104));
dict.VarName105 = cell2mat(raw(:, 105));
dict.VarName106 = cell2mat(raw(:, 106));
dict.e22 = cell2mat(raw(:, 107));
dict.VarName108 = cell2mat(raw(:, 108));
dict.VarName109 = cell2mat(raw(:, 109));
dict.VarName110 = cell2mat(raw(:, 110));
dict.e23 = cell2mat(raw(:, 111));
dict.VarName112 = cell2mat(raw(:, 112));
dict.e24 = cell2mat(raw(:, 113));
dict.VarName114 = cell2mat(raw(:, 114));
dict.VarName115 = cell2mat(raw(:, 115));
dict.VarName116 = cell2mat(raw(:, 116));
dict.VarName117 = cell2mat(raw(:, 117));
dict.VarName118 = cell2mat(raw(:, 118));
dict.VarName119 = cell2mat(raw(:, 119));
dict.VarName120 = cell2mat(raw(:, 120));
dict.e25 = cell2mat(raw(:, 121));
dict.VarName122 = cell2mat(raw(:, 122));
dict.VarName123 = cell2mat(raw(:, 123));
dict.VarName124 = cell2mat(raw(:, 124));
dict.VarName125 = cell2mat(raw(:, 125));
dict.VarName126 = cell2mat(raw(:, 126));
dict.e26 = cell2mat(raw(:, 127));
dict.VarName128 = cell2mat(raw(:, 128));
dict.VarName129 = cell2mat(raw(:, 129));
dict.VarName130 = cell2mat(raw(:, 130));
dict.VarName131 = cell2mat(raw(:, 131));
dict.VarName132 = cell2mat(raw(:, 132));
dict.VarName133 = cell2mat(raw(:, 133));
dict.VarName134 = cell2mat(raw(:, 134));
dict.VarName135 = cell2mat(raw(:, 135));
dict.VarName136 = cell2mat(raw(:, 136));
dict.VarName137 = cell2mat(raw(:, 137));
dict.VarName138 = cell2mat(raw(:, 138));
dict.VarName139 = cell2mat(raw(:, 139));
dict.VarName140 = cell2mat(raw(:, 140));
dict.VarName141 = cell2mat(raw(:, 141));
dict.VarName142 = cell2mat(raw(:, 142));
dict.VarName143 = cell2mat(raw(:, 143));
dict.VarName144 = cell2mat(raw(:, 144));
dict.VarName145 = cell2mat(raw(:, 145));
dict.VarName146 = cell2mat(raw(:, 146));
dict.VarName147 = cell2mat(raw(:, 147));
dict.VarName148 = cell2mat(raw(:, 148));
dict.VarName149 = cell2mat(raw(:, 149));

